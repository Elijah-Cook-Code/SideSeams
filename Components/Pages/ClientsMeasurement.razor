@page "/client-measurements"
@using MudBlazor
@using MudBlazor.Components
@inject SideSeams.Data.Services.ClientServices ClientService


<MudContainer>
    <MudCard Elevation="4">
        <!-- Card Header with Search & Add Measurement Button -->
        <MudCardHeader>
            <MudText Typo="Typo.h6">Client Measurements</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_quickFilter" Placeholder="Search Measurements..."
                          Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleForm">
                @(showForm ? "Cancel" : "Add Measurement")
            </MudButton>
        </MudCardHeader>

        <!-- DataGrid Section -->
        <MudCardContent>
            <MudDataGrid T="ClientMeasurements" MultiSelection="true" Items="@measurements"
                         SortMode="SortMode.Multiple" Filterable="true" QuickFilter="FilterMeasurements"
                         Hideable="true" SelectedItemsChanged="SelectedItemsChanged" Dense="true" Hover="true">
                <Columns>
                    <SelectColumn T="ClientMeasurements" />
                    <PropertyColumn Property="x => x.Client.Name" Title="Client Name" />
                    <PropertyColumn Property="x => x.A_ChestMeasurement" Title="Chest" />
                    <PropertyColumn Property="x => x.B_SeatMeasurement" Title="Seat" />
                    <PropertyColumn Property="x => x.C_WaistMeasurement" Title="Waist" />
                    <PropertyColumn Property="x => x.D_TrouserMeasurement" Title="Trouser" />
                    <PropertyColumn Property="x => x.E_F_HalfBackMeasurement" Title="Half Back" />

                    <!-- Actions Column (Edit & Delete) -->
                    <TemplateColumn Title="Actions">
                        <CellTemplate Context="context">
                            <MudButton Color="Color.Primary" OnClick="@(() => EditMeasurement(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            </MudButton>
                            <MudButton Color="Color.Error" OnClick="@(() => DeleteMeasurement(context.Item.Id))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ClientMeasurements" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>

        <!-- Add/Edit Form Section (Inside the same card) -->
        <MudCollapse Expanded="showForm">
            <MudCardContent>
                <MudForm Model="editingMeasurement" IsValid="@isValid">
                    <MudTextField Label="Client ID" @bind-Value="editingMeasurement.ClientId" Required="true" />
                    <MudTextField Label="Chest" @bind-Value="editingMeasurement.A_ChestMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Seat" @bind-Value="editingMeasurement.B_SeatMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Waist" @bind-Value="editingMeasurement.C_WaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Trouser" @bind-Value="editingMeasurement.D_TrouserMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Half Back" @bind-Value="editingMeasurement.E_F_HalfBackMeasurement" InputType="InputType.Number" />

                    <MudAlert Severity="Severity.Error" Dense="true" Show="@(!isValid)">
                        Please fill in required fields.
                    </MudAlert>
                </MudForm>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="SaveMeasurement" Disabled="!isValid">Save</MudButton>
                <MudButton Color="Color.Secondary" OnClick="ToggleForm">Cancel</MudButton>
            </MudCardActions>
        </MudCollapse>
    </MudCard>
</MudContainer>

@code {
    private List<ClientMeasurements>? measurements;

    private ClientMeasurements editingMeasurement = new ClientMeasurements();

    private bool showForm = false;

    private bool isValid = true;

    private string? _quickFilter;



    protected override async Task OnInitializedAsync()

    {

        try

        {

            measurements = await ClientService.GetClientMeasurementsAsync();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error fetching client measurements: {ex.Message}");

        }

    }



    private void ToggleForm()

    {

        showForm = !showForm;

    }



    private void EditMeasurement(ClientMeasurements measurement)

    {

        editingMeasurement = measurement;

        showForm = true;

    }



    private async Task SaveMeasurement()

    {

        if (editingMeasurement.Id == 0)

        {

            await ClientService.AddClientMeasurementAsync(editingMeasurement);

        }

        else

        {

            await ClientService.UpdateClientMeasurementAsync(editingMeasurement);

        }

        measurements = await ClientService.GetClientMeasurementsAsync();

        showForm = false;

    }



    private async Task DeleteMeasurement(int measurementId)

    {

        await ClientService.DeleteClientMeasurementAsync(measurementId);

        measurements = await ClientService.GetClientMeasurementsAsync();

    }



    private bool FilterMeasurements(ClientMeasurements measurement)

    {

        if (string.IsNullOrWhiteSpace(_quickFilter))

            return true;



        return measurement.Client.Name.Contains(_quickFilter, StringComparison.OrdinalIgnoreCase) ||

               measurement.A_ChestMeasurement.ToString().Contains(_quickFilter);

    }



    private void SelectedItemsChanged(HashSet<ClientMeasurements> selected)

    {

        // Handle selection if needed

    }
}

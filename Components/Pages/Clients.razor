@page "/clients"
@using MudBlazor
@using SideSeams.Data.Models
@inject SideSeams.Data.Services.ClientServices ClientService


<MudContainer>
    <MudCard Elevation="4">
        <!-- Card Header with Search & Add Client Button -->
        <MudCardHeader>
            <MudText Typo="Typo.h6">Client Information</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_quickFilter" Placeholder="Search Clients..."
                          Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleForm">
                @(showForm ? "Cancel" : "Add Client")
            </MudButton>
        </MudCardHeader>

        <!-- DataGrid Section -->
        <MudCardContent>
            <MudDataGrid T="ClientInfo" MultiSelection="true" Items="@clients"
                         SortMode="SortMode.Multiple" Filterable="true" QuickFilter="FilterClients"
                         Hideable="true" SelectedItemsChanged="SelectedItemsChanged" Dense="true" Hover="true">

                <Columns>
                    <SelectColumn T="ClientInfo" />
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <PropertyColumn Property="x => x.Date" Title="Date" />
                    <PropertyColumn Property="x => x.PhoneNumber" Title="Phone" />
                    <PropertyColumn Property="x => x.Notes" Title="Notes" />

                    <!-- Actions Column (Edit & Delete) -->
                    <TemplateColumn Title="Actions">
                        <CellTemplate Context="context">
                            <MudButton Color="Color.Primary" OnClick="@(() => EditClient(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            </MudButton>

                            <MudButton Color="Color.Error" OnClick="@(() => DeleteClient(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="ClientInfo" />
                </PagerContent>

            </MudDataGrid>
        </MudCardContent>

        <!-- Add/Edit Form Section (Inside the same card) -->
        <MudCollapse Expanded="showForm">
            <MudCardContent>
                <MudForm Model="editingClient" IsValid="@isValid">
                    <MudTextField Label="Name" @bind-Value="editingClient.Name" Required="true" />
                    <MudTextField Label="Phone Number" @bind-Value="editingClient.PhoneNumber" />
                    <MudTextField Label="Notes" @bind-Value="editingClient.Notes" />

                    <MudText Typo="Typo.subtitle1">Measurements</MudText>
                    <MudTextField Label="Chest" @bind-Value="editingMeasurements.A_ChestMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Waist" @bind-Value="editingMeasurements.C_WaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Trouser" @bind-Value="editingMeasurements.D_TrouserMeasurement" InputType="InputType.Number" />

                    <MudAlert Severity="Severity.Error" Dense="true" Show="@(!isValid)">
                        Please fill in required fields.
                    </MudAlert>
                </MudForm>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="SaveClient" Disabled="!isValid">Save</MudButton>
                <MudButton Color="Color.Secondary" OnClick="ToggleForm">Cancel</MudButton>
            </MudCardActions>
        </MudCollapse>
    </MudCard>


</MudContainer>

@code {
    private List<ClientInfo> clients = new();
    private string _quickFilter = "";
    private HashSet<ClientInfo> _selectedItems = new();


    private bool showForm = false;


    private ClientInfo editingClient = new();
    private ClientMeasurements editingMeasurements = new();

    private bool isValid => !string.IsNullOrWhiteSpace(editingClient.Name);

    protected override async Task OnInitializedAsync()
    {
        clients = await ClientService.GetClientsAsync();
    }

    private void ToggleForm()
    {
        showForm = !showForm;
        if (!showForm) ResetForm();
    }
    
    private void ResetForm()
    {
        editingClient = new();
        editingMeasurements = new();
    }

    private void EditClient(ClientInfo client)
    {
        editingClient = client;
        editingMeasurements = client.Measurements.FirstOrDefault() ?? new();
        showForm = true;
    }

    private async Task SaveClient()
    {
        if (isValid)
        {
            if (editingClient.Id == 0)
            {
                // Add new client
                await ClientService.AddClientAsync(editingClient.Name, editingClient.Notes, new List<ClientMeasurements> { editingMeasurements });
            }
            else
            {
                // Update existing client
                await ClientService.UpdateClientAsync(editingClient.Id, editingClient.Name, editingClient.Notes, editingMeasurements);
            }
            clients = await ClientService.GetClientsAsync();
            ToggleForm();
        }
    }

    private async Task DeleteClient(ClientInfo client)
    {
        Console.WriteLine($"Deleting: {client.Name}");
        await ClientService.DeleteClientAsync(client.Id);
        clients = await ClientService.GetClientsAsync(); // Refresh list after delete
    }

    private void SelectedItemsChanged(HashSet<ClientInfo> selectedItems)
    {
        _selectedItems = selectedItems;
    }

    private bool FilterClients(ClientInfo client)
    {
        return string.IsNullOrWhiteSpace(_quickFilter) ||
               client.Name.Contains(_quickFilter, StringComparison.OrdinalIgnoreCase);
    }
}
